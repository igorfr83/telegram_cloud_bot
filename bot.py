import os
import asyncio
import openai
import requests
import pandas as pd
from telegram import Bot
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

load_dotenv()
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
bot = Bot(token=TOKEN)
scheduler = AsyncIOScheduler()

excel_file = "trades.xlsx"
if not os.path.exists(excel_file):
df = pd.DataFrame(columns=["–î–∞—Ç–∞", "–°–¥–µ–ª–∫–∞", "–¢–∏–ø", "–ú–æ–Ω–µ—Ç–∞", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "SL", "TP", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
df.to_excel(excel_file, index=False)

# ========== –ù–æ–≤–æ—Å—Ç–∏ ==========
async def send_crypto_news():
news = "üì∞ –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n‚Ä¢ BTC —Å—Ç–∞–±–∏–ª–µ–Ω\n‚Ä¢ ETF –æ–¥–æ–±—Ä–µ–Ω –≤ –°–®–ê\n‚Ä¢ –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ —Ä–∞—Å—Ç—É—Ç."
await bot.send_message(chat_id=CHAT_ID, text=news)

# ========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ ==========
async def send_trade(time_tag):
deals = {
"12:00": [
{"coin": "BTCUSDT", "type": "Long", "entry": 68500, "sl": 67400, "tp": 69900},
{"coin": "LTCUSDT", "type": "Short", "entry": 86.50, "sl": 88.00, "tp": 82.00}
],
"18:00": [
{"coin": "ETHUSDT", "type": "Long", "entry": 3740, "sl": 3650, "tp": 3880},
{"coin": "NEARUSDT", "type": "Short", "entry": 7.45, "sl": 7.75, "tp": 6.80}
]
}

msg = f"üíπ –°–¥–µ–ª–∫–∏ –Ω–∞ {time_tag}:\n"
for d in deals[time_tag]:
msg += f"\nüìà {d['coin']} ({d['type']})\n‚Ä¢ –í—Ö–æ–¥: {d['entry']}\n‚Ä¢ SL: {d['sl']}\n‚Ä¢ TP: {d['tp']}\n"

# –ó–∞–ø–∏—Å—å –≤ Excel
df = pd.read_excel(excel_file)
df.loc[len(df)] = [
datetime.now().strftime("%Y-%m-%d %H:%M"),
"‚è∞ " + time_tag,
d['type'],
d['coin'],
d['entry'],
d['sl'],
d['tp'],
"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–¥–µ–ª–∫–∞"
]
df.to_excel(excel_file, index=False)

await bot.send_message(chat_id=CHAT_ID, text=msg)

# ========== –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç ==========
async def hourly_report():
df = pd.read_excel(excel_file)
latest = df.tail(3)
text = "üïê –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–¥–µ–ª–∫–∞–º:\n"
for _, row in latest.iterrows():
text += f"\n‚Ä¢ {row['–ú–æ–Ω–µ—Ç–∞']} ({row['–¢–∏–ø']}) ‚Äî –í—Ö–æ–¥ {row['–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞']}, SL {row['SL']}, TP {row['TP']}"
await bot.send_message(chat_id=CHAT_ID, text=text)

# ========== –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ==========
async def check_critical_condition():
critical_text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°–¥–µ–ª–∫–∞ –ø–æ BTCUSDT –±–ª–∏–∑–∫–∞ –∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ Stop-Loss!"
await bot.send_message(chat_id=CHAT_ID, text=critical_text)

# ========== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ==========
def setup_scheduler():
scheduler.add_job(send_crypto_news, 'cron', hour=6, minute=0)
scheduler.add_job(send_trade, 'cron', hour=12, minute=0, args=["12:00"])
scheduler.add_job(send_trade, 'cron', hour=18, minute=0, args=["18:00"])
scheduler.add_job(hourly_report, 'cron', minute=0)
scheduler.add_job(check_critical_condition, 'interval', minutes=10)
scheduler.start()

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
setup_scheduler()
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞.")
asyncio.get_event_loop().run_forever()
